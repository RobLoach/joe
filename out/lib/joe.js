// Generated by CoffeeScript 1.3.3
(function() {
  var Block, balUtil, joe,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  balUtil = typeof require !== "undefined" && require !== null ? require('bal-util') : this.balUtilFlow;

  Block = balUtil.Block;

  joe = {
    globalSuite: null,
    getGlobalSuite: function() {
      var _ref;
      return (_ref = joe.globalSuite) != null ? _ref : joe.globalSuite = new joe.Suite('joe');
    },
    reporters: [],
    errord: false,
    exited: false,
    exit: function(err) {
      if (joe.exited) {
        return;
      }
      joe.exited = true;
      if (err) {
        joe.errord = true;
        if (!(err instanceof Error)) {
          err = new Error(err);
        }
        joe.report('uncaughtException', err);
      }
      return process.exit(joe.errord ? 1 : 0);
    },
    report: function() {
      var args, event, reporter, _i, _len, _ref, _ref1, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (joe.reporters.length === 0) {
        joe.setDefaultReporter(function() {
          var Reporter, arg, argResult, defaultReporter, _i, _len, _ref;
          defaultReporter = 'console';
          if ((typeof process !== "undefined" && process !== null ? process.argv : void 0) != null) {
            _ref = process.argv;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              arg = _ref[_i];
              argResult = arg.replace(/^--joe-reporter=/, '');
              if (argResult !== arg) {
                defaultReporter = argResult;
                break;
              }
            }
            Reporter = require(__dirname + ("/../lib/reporters/" + defaultReporter));
          } else {
            Reporter = joe.ConsoleReporter;
          }
          return new Reporter();
        });
      }
      _ref = joe.reporters;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        reporter = _ref[_i];
        _results.push((_ref1 = reporter[event]) != null ? _ref1.apply(reporter, args) : void 0);
      }
      return _results;
    },
    setDefaultReporter: function(createReporter) {
      if (joe.reporters.length === 0) {
        return joe.reporters.push(createReporter());
      }
    }
  };

  joe.Suite = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.createSubBlock = function(name, fn, parentBlock) {
      return new joe.Suite(name, fn, parentBlock);
    };

    _Class.prototype.blockBefore = function(block) {
      joe.report('startSuite', block);
      return _Class.__super__.blockBefore.apply(this, arguments);
    };

    _Class.prototype.blockAfter = function(block, err) {
      if (err) {
        joe.errord = true;
      }
      joe.report('finishSuite', block, err);
      return _Class.__super__.blockAfter.apply(this, arguments);
    };

    _Class.prototype.blockTaskBefore = function(block, test) {
      joe.report('startTest', block, test);
      return _Class.__super__.blockTaskBefore.apply(this, arguments);
    };

    _Class.prototype.blockTaskAfter = function(block, test, err) {
      if (err) {
        joe.errord = true;
      }
      joe.report('finishTest', block, test, err);
      return _Class.__super__.blockTaskAfter.apply(this, arguments);
    };

    _Class.prototype.getSuiteName = function() {
      return this.blockName;
    };

    _Class.prototype.getParentSuite = function() {
      return this.parentBlock;
    };

    _Class.prototype.suite = function(name, fn) {
      return this.block(name, fn);
    };

    _Class.prototype.describe = function(name, fn) {
      return this.block(name, fn);
    };

    _Class.prototype.test = function(name, fn) {
      return this.task(name, fn);
    };

    _Class.prototype.it = function(name, fn) {
      return this.task(name, fn);
    };

    return _Class;

  })(Block);

  if (typeof process !== "undefined" && process !== null) {
    process.on('SIGINT', function() {
      return joe.exit();
    });
    process.on('exit', function() {
      if (!joe.exited) {
        joe.report('exit');
        if (joe.errord) {
          return joe.exit(1);
        }
      }
    });
    process.on('uncaughtException', function(err) {
      return joe.exit(err);
    });
  }

  joe.describe = joe.suite = function(name, fn) {
    return joe.getGlobalSuite().suite(name, fn);
  };

  joe.it = joe.test = function(name, fn) {
    return joe.getGlobalSuite().test(name, fn);
  };

  if (typeof require !== "undefined" && require !== null) {
    joe.require = function(path) {
      return require(__dirname + '/' + path);
    };
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = joe;
  } else {
    this.joe = joe;
  }

}).call(this);
