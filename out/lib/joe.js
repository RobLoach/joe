// Generated by CoffeeScript 1.3.3
(function() {
  var Group, Reporter, Suite, balUtilFlow, createSuite, joe, report, reporters,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  balUtilFlow = typeof require !== "undefined" && require !== null ? require('bal-util/lib/flow') : this.balUtilFlow;

  Group = balUtilFlow.Group;

  Reporter = (function() {

    Reporter.prototype.errors = null;

    Reporter.prototype.config = null;

    Reporter.prototype.passed = 0;

    Reporter.prototype.failed = 0;

    Reporter.prototype.total = 0;

    function Reporter(config) {
      var _base, _base1, _base2, _base3, _ref, _ref1, _ref2, _ref3;
      this.errors || (this.errors = []);
      this.config || (this.config = config || {});
      if ((_ref = (_base = this.config).start) == null) {
        _base.start = ' ';
      }
      if ((_ref1 = (_base1 = this.config).fail) == null) {
        _base1.fail = ' ✘ ';
      }
      if ((_ref2 = (_base2 = this.config).pass) == null) {
        _base2.pass = ' ✔ ';
      }
      if ((_ref3 = (_base3 = this.config).sub) == null) {
        _base3.sub = ' ➞  ';
      }
    }

    Reporter.prototype.getSuiteName = function(suite) {
      var parentSuiteName, suiteName;
      suiteName = suite.name;
      if (suite.parentSuite) {
        parentSuiteName = this.getSuiteName(suite.parentSuite);
        suiteName = "" + parentSuiteName + this.config.sub + suiteName;
      }
      return suiteName;
    };

    Reporter.prototype.getTestName = function(suite, testName) {
      var suiteName;
      suiteName = this.getSuiteName(suite);
      testName = "" + suiteName + this.config.sub + testName;
      return testName;
    };

    Reporter.prototype.startSuite = function(suite) {
      var message, suiteName;
      suiteName = this.getSuiteName(suite);
      message = "" + suiteName + this.config.start;
      return console.log(message);
    };

    Reporter.prototype.finishSuite = function(suite, err) {
      var check, message, suiteName;
      suiteName = this.getSuiteName(suite);
      check = (err ? this.config.fail : this.config.pass);
      message = "" + suiteName + check;
      return console.log(message);
    };

    Reporter.prototype.startTest = function(suite, testName) {
      var message;
      ++this.total;
      testName = this.getTestName(suite, testName);
      message = "" + testName + this.config.start;
      return console.log(message);
    };

    Reporter.prototype.finishTest = function(suite, testName, err) {
      var check, message;
      if (err) {
        this.errors.push({
          suite: suite,
          testName: testName,
          err: err
        });
        ++this.failed;
      } else {
        ++this.passed;
      }
      testName = this.getTestName(suite, testName);
      check = (err ? this.config.fail : this.config.pass);
      message = "" + testName + check;
      return console.log(message, (typeof process !== "undefined" && process !== null) === false && err ? [err, err.stack] : '');
    };

    Reporter.prototype.exit = function() {
      var err, error, index, suite, testName, _i, _len, _ref, _results;
      if (this.errors.length === 0) {
        return console.log("\n" + this.passed + "/" + this.total + " tests ran successfully, everything passed");
      } else {
        console.log("\n" + this.passed + "/" + this.total + " tests ran successfully, " + this.errors.length + " failed");
        _ref = this.errors;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          error = _ref[index];
          suite = error.suite, testName = error.testName, err = error.err;
          testName = this.getTestName(suite, testName);
          _results.push(console.log("\nFailure \#" + (index + 1) + "\n" + testName + "\n" + (err.stack.toString())));
        }
        return _results;
      }
    };

    return Reporter;

  })();

  Suite = (function(_super) {

    __extends(Suite, _super);

    function Suite(name, fn, parentSuite) {
      var suite;
      suite = this;
      Suite.__super__.constructor.call(this, function(err) {
        var _ref;
        report('finishSuite', suite, err);
        return (_ref = suite.parentSuite) != null ? _ref.complete(err) : void 0;
      });
      suite.name = name;
      suite.parentSuite = parentSuite;
      suite.mode = 'sync';
      report('startSuite', suite);
      if (fn.length === 3) {
        suite.total = Infinity;
      }
      fn(function(name, fn) {
        return suite.suite(name, fn);
      }, function(name, fn) {
        return suite.test(name, fn);
      }, function(err) {
        return suite.exit(err);
      });
      if (fn.length !== 3) {
        suite.run();
      }
    }

    Suite.prototype.suite = function(name, fn) {
      var push, suite;
      suite = this;
      push = function(complete) {
        if (suite.total === Infinity) {
          return suite.pushAndRun(complete);
        } else {
          return suite.push(complete);
        }
      };
      push(function() {
        var subSuite;
        return subSuite = new Suite(name, fn, suite);
      });
      return this;
    };

    Suite.prototype.test = function(name, fn) {
      var push, suite;
      suite = this;
      push = function(complete) {
        if (suite.total === Infinity) {
          return suite.pushAndRun(complete);
        } else {
          return suite.push(complete);
        }
      };
      push(function(complete) {
        var preComplete;
        preComplete = function(err) {
          report('finishTest', suite, name, err);
          return complete(err);
        };
        report('startTest', suite, name);
        if (fn.length < 1) {
          try {
            fn();
            return preComplete();
          } catch (err) {
            return preComplete(err);
          }
        } else {
          try {
            return fn(preComplete);
          } catch (err) {
            return preComplete(err);
          }
        }
      });
      return this;
    };

    return Suite;

  })(Group);

  createSuite = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args), t = typeof result;
      return t == "object" || t == "function" ? result || child : child;
    })(Suite, args, function(){});
  };

  report = function() {
    var args, event, reporter, _i, _len, _ref, _results;
    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = joe.reporters;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      reporter = _ref[_i];
      _results.push(reporter[event].apply(reporter, args));
    }
    return _results;
  };

  reporters = [new Reporter()];

  joe = {
    Suite: Suite,
    Reporter: Reporter,
    reporters: reporters,
    createSuite: createSuite
  };

  if (typeof process !== "undefined" && process !== null) {
    process.on('exit', function() {
      return report('exit');
    });
  }

  if (typeof global !== "undefined" && global !== null) {
    global.describe = global.suite = createSuite;
  } else {
    this.describe = this.suite = createSuite;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = joe;
  } else {
    this.joe = joe;
  }

}).call(this);
